from miasm2.analysis.sandbox import Sandbox_Win_x86_32
from core.sandbox import Sandbox_Win_x86_32_Nymaim
from core.deobfuscation import PushReg, DetourCall, DetourJmp

class Emu:
    """This class aims to emulate parts of the binary
    
    Attributes:
     - options(argparse.Namespace): Options for miasm 
     - sb(Sandbox_Win_x86_32): Miasm SandBox
     - list_emu(Dict): List of all emulations
    """

    def __init__(self, options):
        """Initialization of the class

        Arguments: 
         - options(argparse.Namespace): Options for miasm 
        """
        self.options = options
        self.sb = Sandbox_Win_x86_32_Nymaim(options.input, options, globals())
        self.list_emu = {}

    
    def deobf_push_reg(self):
        """This method deobfuscate the function used to push registers on the stack."""

        try:
            self.list_emu["pushreg"] = PushReg(self.sb)
        except:
            return

    def deobf_detour_call(self):
        """This method deobfuscate the function used to call functions"""

        try:
            self.list_emu["detourcall"] = DetourCall(self.sb) 

        except:
            return
    
    def deobf_detour_jmp(self):
        """This method deobfuscate the function used to call functions"""

        try:
            self.list_emu["detourjmp"] = DetourJmp(self.sb) 
        except:
            return
