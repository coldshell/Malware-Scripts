import pygrap
from core.color import Color
from core.config import EP_PATTERN, XREFS_PATTERN

class Matches:
    """This class is used to match pattern and get xrefs
    
    Attributes:
     - cfg(Dict): Config for a given pattern
     - test_graph(pygrap.graph_t): Grap representation of the binary
     - matches(List(Match)): Matches of the given pattern in the binary
    """

    def __init__(self, cfg, test_graph):
        """Initialization

        Arguments:
         - cfg(Dict): Config for a given pattern
         - test_graph(pygrap.graph_t): Grap representation of the binary
        """
        self.cfg = cfg
        self.test_graph = test_graph
        self.matches = []
        
        # search for patterns
        matches = pygrap.match_graph(self.cfg["func_pattern"], self.test_graph).items()[0][1]

        print Color.info("The graph {name} was found {size} time(s)".format(name=self.cfg["name"],
                                                                            size=len(matches)))
        # process matches
        for match in matches: 
            try:
                self.matches.append(Match(match, self.test_graph, self.cfg))
            except:
                continue


class Match:
    """ Process each match from grap
    
    Attributes:
     - match(pygrap.MatchList): match of a pattern
     - test_graph(pygrap.graph_t): Grap representation of the binary
     - cfg(Dict): Config for a given pattern
     - func_addr(Int): Address of the entrypoint of the function with the match
     - xrefs(List(Int)): List of addresses of each call to the match function
     - args(List(pygrap.Match)): List of arguments of each XREFS to the function
     - deobf_inst(List(Dict)): List of args and deobf instruction(e.g. [{"args":args, "inst":"PUSH EAX"}])
    """

    def __init__(self, match, test_graph, cfg):
        """ Initialization
        
        Arguments:
         - match(pygrap.MatchList): match of a pattern
         - test_graph(pygrap.graph_t): Grap representation of the binary
         - cfg(Dict): Config for a given pattern
        """
        self.match = match
        self.test_graph = test_graph
        self.cfg = cfg

        self.func_addr = None
        self.xrefs = []
        self.args = []
        self.deobf_inst = []

        # get EP of the function
        self.get_func_ep()
        # get all xrefs of the function
        self.get_xrefs()
        # get args of each xrefs of the function
        self.get_args()

    def get_func_ep(self):
        """Try to get the entrypoint of the matched function"""
        self.func_addr = self.match["first_inst"][0].info.address

    def get_func_ep_grap(self):
        """Try to get the entrypoint of the matched function"""

        first_inst = self.match["first_inst"][0]
        first_addr = first_inst.info.address

        # Find the beginning of the function:
        # It is a node with at least 2 fathers which address a fulfills: address - 0x7 <= a <= address
        address_cond = "address >= " + str(hex(int(first_addr - 0x7))) + " and address <= " + str(hex(int(first_addr)))
        ep_pattern = EP_PATTERN.replace("FILL_ADDR_COND", address_cond)

        #print Color.step("Searching for the function entrypoint near 0x{:X}".format(first_addr))

        # search for the EP
        ep_matches = pygrap.match_graph(ep_pattern, self.test_graph)
        
        if len(ep_matches) != 1 or len(ep_matches["ep_func"]) != 1:
            print Color.error("Entrypoint not found or the function was not call for the address 0x{:X}".format(first_addr))
        else:
            self.func_addr = int(ep_matches["ep_func"][0]["ep"][0].info.address)
            #print Color.info("Found the entrypoint at 0x{:X} for 0x{:X}".format(self.func_addr, first_addr))

    def get_xrefs(self):
        """Try to get the xrefs of the matched function"""

        # generate our pattern for xrefs
        xrefs_pattern = XREFS_PATTERN.replace("FILL_ADDR", str(hex(self.func_addr)))
        
        #print Color.step("Searching for the XREFS to the function 0x{:X}".format(self.func_addr))

        # match the pattern
        call_matches = pygrap.match_graph(xrefs_pattern, self.test_graph)

        # creation of the list of xrefs
        if len(call_matches) == 0:
            print Color.error("No XREFS to the function 0x{:X} was found".format(self.func_addr))
        else:
            for match in call_matches["xrefs"]:
                self.xrefs.append(int(match["call"][0].info.address))

            #print Color.info("Found {} XREFS to the function 0x{:X}".format(len(self.xrefs), self.func_addr))

    def get_args(self):
        """Try to get the args of the all XREFS of the function"""

        # load the pattern
        args_pattern = open(self.cfg["call_pattern"], "r").read()
        args_pattern = args_pattern.replace("FILL_ADDR", str(hex(self.func_addr)))

        #print Color.step("Searching for arguments of each XREFS to the function 0x{:X}".format(self.func_addr))

        # match the pattern
        args_matches = pygrap.match_graph(args_pattern, self.test_graph)

        for match in args_matches.items()[0][1]:
            self.args.append(match)

        #print Color.info("Found the arguments of {} XREFS to the function 0x{:X}".format(len(self.args), self.func_addr))
